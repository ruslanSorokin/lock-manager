// Code generated by mockery. DO NOT EDIT.

package mock

import (
	apputil "github.com/ruslanSorokin/lock-manager/internal/pkg/apputil"
	mock "github.com/stretchr/testify/mock"
)

// Metric is an autogenerated mock type for the MetricI type
type Metric struct {
	mock.Mock
}

type Metric_Expecter struct {
	mock *mock.Mock
}

func (_m *Metric) EXPECT() *Metric_Expecter {
	return &Metric_Expecter{mock: &_m.Mock}
}

// SetEnvironment provides a mock function with given fields: _a0
func (_m *Metric) SetEnvironment(_a0 apputil.Env) {
	_m.Called(_a0)
}

// Metric_SetEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEnvironment'
type Metric_SetEnvironment_Call struct {
	*mock.Call
}

// SetEnvironment is a helper method to define mock.On call
//   - _a0 apputil.Env
func (_e *Metric_Expecter) SetEnvironment(_a0 interface{}) *Metric_SetEnvironment_Call {
	return &Metric_SetEnvironment_Call{Call: _e.mock.On("SetEnvironment", _a0)}
}

func (_c *Metric_SetEnvironment_Call) Run(run func(_a0 apputil.Env)) *Metric_SetEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(apputil.Env))
	})
	return _c
}

func (_c *Metric_SetEnvironment_Call) Return() *Metric_SetEnvironment_Call {
	_c.Call.Return()
	return _c
}

func (_c *Metric_SetEnvironment_Call) RunAndReturn(run func(apputil.Env)) *Metric_SetEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// SetVersion provides a mock function with given fields: _a0
func (_m *Metric) SetVersion(_a0 apputil.Ver) {
	_m.Called(_a0)
}

// Metric_SetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetVersion'
type Metric_SetVersion_Call struct {
	*mock.Call
}

// SetVersion is a helper method to define mock.On call
//   - _a0 apputil.Ver
func (_e *Metric_Expecter) SetVersion(_a0 interface{}) *Metric_SetVersion_Call {
	return &Metric_SetVersion_Call{Call: _e.mock.On("SetVersion", _a0)}
}

func (_c *Metric_SetVersion_Call) Run(run func(_a0 apputil.Ver)) *Metric_SetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(apputil.Ver))
	})
	return _c
}

func (_c *Metric_SetVersion_Call) Return() *Metric_SetVersion_Call {
	_c.Call.Return()
	return _c
}

func (_c *Metric_SetVersion_Call) RunAndReturn(run func(apputil.Ver)) *Metric_SetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// NewMetric creates a new instance of Metric. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetric(t interface {
	mock.TestingT
	Cleanup(func())
}) *Metric {
	mock := &Metric{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
