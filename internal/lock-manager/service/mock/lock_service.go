// Code generated by mockery. DO NOT EDIT.

package servicemock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// LockService is an autogenerated mock type for the LockServiceI type
type LockService struct {
	mock.Mock
}

type LockService_Expecter struct {
	mock *mock.Mock
}

func (_m *LockService) EXPECT() *LockService_Expecter {
	return &LockService_Expecter{mock: &_m.Mock}
}

// Lock provides a mock function with given fields: ctx, resourceID
func (_m *LockService) Lock(ctx context.Context, resourceID string) (string, error) {
	ret := _m.Called(ctx, resourceID)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, resourceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, resourceID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, resourceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LockService_Lock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lock'
type LockService_Lock_Call struct {
	*mock.Call
}

// Lock is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceID string
func (_e *LockService_Expecter) Lock(ctx interface{}, resourceID interface{}) *LockService_Lock_Call {
	return &LockService_Lock_Call{Call: _e.mock.On("Lock", ctx, resourceID)}
}

func (_c *LockService_Lock_Call) Run(run func(ctx context.Context, resourceID string)) *LockService_Lock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *LockService_Lock_Call) Return(_a0 string, _a1 error) *LockService_Lock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LockService_Lock_Call) RunAndReturn(run func(context.Context, string) (string, error)) *LockService_Lock_Call {
	_c.Call.Return(run)
	return _c
}

// Unlock provides a mock function with given fields: ctx, resourceID, token
func (_m *LockService) Unlock(ctx context.Context, resourceID string, token string) error {
	ret := _m.Called(ctx, resourceID, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, resourceID, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LockService_Unlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unlock'
type LockService_Unlock_Call struct {
	*mock.Call
}

// Unlock is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceID string
//   - token string
func (_e *LockService_Expecter) Unlock(ctx interface{}, resourceID interface{}, token interface{}) *LockService_Unlock_Call {
	return &LockService_Unlock_Call{Call: _e.mock.On("Unlock", ctx, resourceID, token)}
}

func (_c *LockService_Unlock_Call) Run(run func(ctx context.Context, resourceID string, token string)) *LockService_Unlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *LockService_Unlock_Call) Return(_a0 error) *LockService_Unlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LockService_Unlock_Call) RunAndReturn(run func(context.Context, string, string) error) *LockService_Unlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewLockService creates a new instance of LockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *LockService {
	mock := &LockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
