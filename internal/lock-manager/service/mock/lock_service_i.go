// Code generated by mockery. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// LockService is an autogenerated mock type for the LockServiceI type
type LockService struct {
	mock.Mock
}

// Lock provides a mock function with given fields: ctx, resourceID
func (_m *LockService) Lock(ctx context.Context, resourceID string) (string, error) {
	ret := _m.Called(ctx, resourceID)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, resourceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, resourceID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, resourceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unlock provides a mock function with given fields: ctx, resourceID, token
func (_m *LockService) Unlock(ctx context.Context, resourceID string, token string) error {
	ret := _m.Called(ctx, resourceID, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, resourceID, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLockService creates a new instance of LockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLockService(t interface {
	mock.TestingT
	Cleanup(func())
},
) *LockService {
	mock := &LockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
