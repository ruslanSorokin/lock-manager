// Code generated by mockery. DO NOT EDIT.

package mock

import (
	context "context"

	model "github.com/ruslanSorokin/lock-manager/internal/lock-manager/model"
	mock "github.com/stretchr/testify/mock"
)

// LockProvider is an autogenerated mock type for the LockProviderI type
type LockProvider struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, l
func (_m *LockProvider) Create(ctx context.Context, l model.Lock) error {
	ret := _m.Called(ctx, l)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Lock) error); ok {
		r0 = rf(ctx, l)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, resourceID
func (_m *LockProvider) Delete(ctx context.Context, resourceID string) error {
	ret := _m.Called(ctx, resourceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, resourceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteIfTokenMatches provides a mock function with given fields: ctx, lock
func (_m *LockProvider) DeleteIfTokenMatches(ctx context.Context, lock model.Lock) error {
	ret := _m.Called(ctx, lock)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Lock) error); ok {
		r0 = rf(ctx, lock)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, resourceID
func (_m *LockProvider) Get(ctx context.Context, resourceID string) (model.Lock, error) {
	ret := _m.Called(ctx, resourceID)

	var r0 model.Lock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Lock, error)); ok {
		return rf(ctx, resourceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Lock); ok {
		r0 = rf(ctx, resourceID)
	} else {
		r0 = ret.Get(0).(model.Lock)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, resourceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLockProvider creates a new instance of LockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLockProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *LockProvider {
	mock := &LockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
