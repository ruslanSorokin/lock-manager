// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/go-logr/logr"
	"github.com/go-playground/validator/v10"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/ruslanSorokin/lock-manager/internal/lock-manager/handler/ifiber"
	"github.com/ruslanSorokin/lock-manager/internal/lock-manager/handler/igrpc"
	"github.com/ruslanSorokin/lock-manager/internal/lock-manager/metric/iprom"
	"github.com/ruslanSorokin/lock-manager/internal/lock-manager/provider/storage/iredis"
	"github.com/ruslanSorokin/lock-manager/internal/lock-manager/service"
	"github.com/ruslanSorokin/lock-manager/internal/pkg/conn/redis"
	iprom3 "github.com/ruslanSorokin/lock-manager/internal/pkg/util/app/iprom"
	"github.com/ruslanSorokin/lock-manager/internal/pkg/util/fiber"
	"github.com/ruslanSorokin/lock-manager/internal/pkg/util/grpc"
	iprom2 "github.com/ruslanSorokin/lock-manager/internal/pkg/util/grpc/iprom"
	"github.com/ruslanSorokin/lock-manager/internal/pkg/util/http"
	"net/http"
)

// Injectors from wire.go:

func Wire(logger logr.Logger, config *Config) (*App, func(), error) {
	validate := provideValidator()
	appWireConfig, err := toWireConfig(config)
	if err != nil {
		return nil, nil, err
	}
	redisconnConfig := appWireConfig.Redis
	conn, cleanup, err := redisconn.WireProvide(logger, redisconnConfig)
	if err != nil {
		return nil, nil, err
	}
	lockStorage := iredis.NewLockStorage(logger, conn)
	registry := prometheus.NewRegistry()
	ipromMetric := iprom.New(registry)
	lockService := service.New(logger, validate, lockStorage, ipromMetric)
	loggingLogger := grpcutil.NewInterceptorLogger(logger)
	recoveryMetric := iprom2.NewRecoveryMetric(registry)
	v := grpcutil.NewPanicRecoveryHandler(logger, recoveryMetric)
	serverMetrics := grpcutil.NewProcessingTimeHistogram(registry)
	v2 := grpcutil.WireProvideDefaultServerOpts(loggingLogger, v, serverMetrics)
	grpcutilConfig := appWireConfig.GRPC
	server := grpcutil.WireProvideServer(v2, grpcutilConfig)
	grpcutilHandler := grpcutil.NewHandler(server, logger, grpcutilConfig)
	lockHandler := igrpc.NewLockHandler(grpcutilHandler, logger, lockService)
	fiberutilConfig := appWireConfig.HTTP
	v3 := fiberutil.WireProvideDefaultMiddleware()
	serveMux := http.NewServeMux()
	fiberApp := fiberutil.WireProvideDefaultApp(fiberutilConfig, v3, serveMux)
	fiberutilHandler := fiberutil.NewHandler(fiberApp, logger, fiberutilConfig)
	ifiberLockHandler := ifiber.NewLockHandler(logger, lockService, fiberutilHandler)
	httputilConfig := appWireConfig.Pull
	httpServer := httputil.WireProvideServer(httputilConfig)
	httputilHandler := httputil.NewHandler(logger, httpServer, serveMux, httputilConfig)
	metric2 := iprom3.New(registry)
	env := appWireConfig.Environment
	ver := appWireConfig.Version
	appApp := New(config, logger, lockService, conn, server, lockHandler, ifiberLockHandler, httpServer, serveMux, httputilHandler, metric2, registry, serverMetrics, env, ver)
	return appApp, func() {
		cleanup()
	}, nil
}

// wire.go:

func provideValidator() *validator.Validate {
	return validator.New(validator.WithRequiredStructEnabled())
}
