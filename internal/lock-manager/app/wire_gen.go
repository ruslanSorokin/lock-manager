// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/go-logr/logr"
	"github.com/go-playground/validator/v10"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/ruslanSorokin/lock-manager/internal/lock-manager/handler/igrpc"
	iprom2 "github.com/ruslanSorokin/lock-manager/internal/lock-manager/imetric/iprom"
	"github.com/ruslanSorokin/lock-manager/internal/lock-manager/provider/repository/iredis"
	"github.com/ruslanSorokin/lock-manager/internal/lock-manager/service"
	"github.com/ruslanSorokin/lock-manager/internal/pkg/apputil"
	iprom3 "github.com/ruslanSorokin/lock-manager/internal/pkg/apputil/iprom"
	"github.com/ruslanSorokin/lock-manager/internal/pkg/grpcutil"
	"github.com/ruslanSorokin/lock-manager/internal/pkg/grpcutil/iprom"
	"github.com/ruslanSorokin/lock-manager/internal/pkg/promutil"
	"github.com/ruslanSorokin/lock-manager/internal/pkg/redisconn"
	"net/http"
)

// Injectors from wire.go:

func Wire(env apputil.Env, logger logr.Logger, config *Config) (*App, func(), error) {
	redisconnConfig := config.Redis
	conn, cleanup, err := redisconn.WireProvideConn(logger, redisconnConfig)
	if err != nil {
		return nil, nil, err
	}
	registry := prometheus.NewRegistry()
	serverMetrics := grpcutil.NewProcessingTimeHistogram(registry)
	serveMux := http.NewServeMux()
	server := provideHTTPServer()
	loggingLogger := grpcutil.NewInterceptorLogger(logger)
	recoveryMetric := iprom.NewRecoveryMetric(registry)
	v := grpcutil.NewPanicRecoveryHandler(logger, recoveryMetric)
	v2 := grpcutil.WireProvideInterceptors(loggingLogger, v, serverMetrics)
	grpcutilConfig := config.GRPC
	grpcServer := grpcutil.WireProvideServer(v2, grpcutilConfig)
	validate := validator.New()
	lockStorage := iredis.NewLockStorage(logger, conn)
	metric := iprom2.New(registry)
	lockService := service.New(logger, validate, lockStorage, metric)
	handler := grpcutil.NewHandlerFromConfig(grpcServer, logger, grpcutilConfig)
	lockHandler := igrpc.NewLockHandler(handler, logger, lockService)
	promutilConfig := config.HTTPMetric
	promutilHandler := promutil.NewHandlerFromConfig(logger, registry, serveMux, promutilConfig)
	ipromMetric := iprom3.New(registry)
	ver := config.Ver
	app := New(config, logger, conn, registry, serverMetrics, serveMux, server, grpcServer, lockService, lockHandler, promutilHandler, ipromMetric, env, ver)
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

func provideHTTPServer() *http.Server {
	return &http.Server{}
}
